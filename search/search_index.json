{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"LebryDB","text":"<p>A classe LebryDB \u00e9 uma implementa\u00e7\u00e3o simples de um banco de dados NoSQL baseado em dicion\u00e1rio em Python. Ela permite armazenar e consultar documentos JSON em cole\u00e7\u00f5es.</p>"},{"location":"#metodos-da-classe","title":"M\u00e9todos da Classe","text":""},{"location":"#__init__self","title":"<code>__init__(self)</code>","text":"<p>Descri\u00e7\u00e3o: Inicializa uma inst\u00e2ncia da classe LebryDB.</p>"},{"location":"#insertself-collection-document","title":"<code>insert(self, collection, document)</code>","text":"<p>Descri\u00e7\u00e3o: Insere um documento em uma cole\u00e7\u00e3o.</p> <ul> <li><code>collection</code> (str): O nome da cole\u00e7\u00e3o em que o documento ser\u00e1 inserido.</li> <li><code>document</code> (dict): O documento JSON a ser inserido na cole\u00e7\u00e3o.</li> </ul>"},{"location":"#findself-collection-querynone","title":"<code>find(self, collection, query=None)</code>","text":"<p>Descri\u00e7\u00e3o: Consulta documentos em uma cole\u00e7\u00e3o.</p> <ul> <li><code>collection</code> (str): O nome da cole\u00e7\u00e3o a ser consultada.</li> <li><code>query</code> (dict, opcional): Um dicion\u00e1rio que define crit\u00e9rios de consulta. Se n\u00e3o fornecido, todos os documentos da cole\u00e7\u00e3o ser\u00e3o retornados.</li> </ul> <p>Retorno: Uma lista de documentos que correspondem aos crit\u00e9rios da consulta.</p>"},{"location":"#updateself-collection-query-new_values","title":"<code>update(self, collection, query, new_values)</code>","text":"<p>Descri\u00e7\u00e3o: Atualiza documentos em uma cole\u00e7\u00e3o que correspondem a uma consulta.</p> <ul> <li><code>collection</code> (str): O nome da cole\u00e7\u00e3o a ser atualizada.</li> <li><code>query</code> (dict): Um dicion\u00e1rio que define os crit\u00e9rios para selecionar os documentos a serem atualizados.</li> <li><code>new_values</code> (dict): Um dicion\u00e1rio contendo os novos valores para atualizar os documentos correspondentes.</li> </ul>"},{"location":"#removeself-collection-query","title":"<code>remove(self, collection, query)</code>","text":"<p>Descri\u00e7\u00e3o: Remove documentos de uma cole\u00e7\u00e3o que correspondem a uma consulta.</p> <ul> <li><code>collection</code> (str): O nome da cole\u00e7\u00e3o a ser atualizada.</li> <li><code>query</code> (dict): Um dicion\u00e1rio que define os crit\u00e9rios para selecionar os documentos a serem removidos.</li> </ul>"},{"location":"#guia-de-uso-do-lebrydb","title":"Guia de Uso do LebryDB","text":"<p>O LebryDB \u00e9 uma biblioteca Python leve e simples para armazenamento de dados. Este guia fornecer\u00e1 uma vis\u00e3o geral das principais funcionalidades e como us\u00e1-lo em seus projetos.</p>"},{"location":"#instalacao","title":"Instala\u00e7\u00e3o","text":"<p>Para come\u00e7ar a usar o LebryDB, voc\u00ea pode instal\u00e1-lo via pip:</p> <p><pre><code>pip install lebrydb\n</code></pre> Criando uma Inst\u00e2ncia Ap\u00f3s a instala\u00e7\u00e3o, voc\u00ea pode criar uma inst\u00e2ncia do LebryDB em seu c\u00f3digo Python:</p> <p><pre><code>from lebrydb import LebryDB\n\n# Crie uma inst\u00e2ncia do LebryDB\ndb = LebryDB()\n</code></pre> Inserindo Documentos Para inserir documentos em cole\u00e7\u00f5es, voc\u00ea pode usar o m\u00e9todo insert. Se a cole\u00e7\u00e3o n\u00e3o existir, ela ser\u00e1 criada automaticamente:</p> <p><pre><code># Insira um documento em uma cole\u00e7\u00e3o chamada 'users'\ndb.insert('users', {'name': 'Alice', 'age': 30})\n</code></pre> Consultando Documentos Voc\u00ea pode consultar documentos em uma cole\u00e7\u00e3o com base em crit\u00e9rios espec\u00edficos usando o m\u00e9todo find:</p> <p><pre><code># Consulta documentos em uma cole\u00e7\u00e3o\nresults = db.find('users', {'name': 'Alice'})\nprint(results)  # [{'name': 'Alice', 'age': 30}]\n</code></pre> Atualizando Documentos Para atualizar documentos em uma cole\u00e7\u00e3o que correspondem a uma consulta, use o m\u00e9todo update:</p> <pre><code># Atualize documentos em uma cole\u00e7\u00e3o\ndb.update('users', {'name': 'Alice'}, {'age': 31})\n\u00b4\u00b4\u00b4\nRemovendo Documentos\nPara remover documentos em uma cole\u00e7\u00e3o que correspondem a uma consulta, use o m\u00e9todo remove:\n\n# Remove documentos em uma cole\u00e7\u00e3o\ndb.remove('users', {'name': 'Alice'})\n</code></pre> <p>Personalizando a Inicializa\u00e7\u00e3o Voc\u00ea pode personalizar a inicializa\u00e7\u00e3o do banco de dados com dados iniciais fornecidos:</p>"},{"location":"#dados-iniciais-para-o-banco-de-dados","title":"Dados iniciais para o banco de dados","text":"<p>initial_data = {     'users': [{'name': 'John', 'age': 25}, {'name': 'Alice', 'age': 30}] }</p>"},{"location":"#crie-uma-instancia-do-lebrydb-com-dados-iniciais","title":"Crie uma inst\u00e2ncia do LebryDB com dados iniciais","text":"<p>db_with_data = LebryDB(initial_data) Conclus\u00e3o O LebryDB \u00e9 uma ferramenta flex\u00edvel e f\u00e1cil de usar para armazenar e recuperar dados em seus projetos Python. Com este guia, voc\u00ea deve estar pronto para come\u00e7ar a aproveitar ao m\u00e1ximo esta biblioteca.</p> <p>Lembre-se de explorar a documenta\u00e7\u00e3o oficial para obter informa\u00e7\u00f5es mais detalhadas e exemplos adicionais.</p>"},{"location":"#exemplo-de-uso","title":"Exemplo de Uso","text":"<pre><code>Inserir um documento\n# Cria uma inst\u00e2ncia do LebryDB\ndb = LebryDB()\n\n# Insere um documento em uma cole\u00e7\u00e3o\ndb.insert('users', {'name': 'Alice', 'age': 30})\n\n# Consulta documentos em uma cole\u00e7\u00e3o\nresults = db.find('users', {'name': 'Alice'})\nprint(results)  # [{'name': 'Alice', 'age': 30}]\n\n# Atualiza documentos em uma cole\u00e7\u00e3o\ndb.update('users', {'name': 'Alice'}, {'age': 31})\n\n# Remove documentos em uma cole\u00e7\u00e3o\ndb.remove('users', {'name': 'Alice'})\n\n# Consulta novamente ap\u00f3s a remo\u00e7\u00e3o\nresults = db.find('users', {'name': 'Alice'})\nprint(results)  # []\n</code></pre>"},{"location":"consulta/","title":"LebryDB","text":""},{"location":"consulta/#consultando-documentos-em-uma-colecao","title":"Consultando Documentos em uma Cole\u00e7\u00e3o","text":"<p>A consulta de documentos em uma cole\u00e7\u00e3o \u00e9 uma tarefa essencial ao trabalhar com o LebryDB. O m\u00e9todo <code>find</code> permite que voc\u00ea recupere documentos com base em crit\u00e9rios espec\u00edficos. Vamos explorar como fazer isso passo a passo.</p>"},{"location":"consulta/#passo-1-importar-a-classe-lebrydb","title":"Passo 1: Importar a Classe LebryDB","text":"<p>Antes de realizar consultas, \u00e9 importante criar uma inst\u00e2ncia da classe LebryDB. Certifique-se de importar a classe no seu c\u00f3digo Python:</p> <pre><code>from lebrydb import LebryDB\n</code></pre>"},{"location":"consulta/#crie-uma-instancia-do-lebrydb","title":"Crie uma inst\u00e2ncia do LebryDB","text":"<p>db = LebryDB() Passo 2: Consultar Documentos em uma Cole\u00e7\u00e3o Agora que voc\u00ea tem uma inst\u00e2ncia do LebryDB, pode usar o m\u00e9todo find para consultar documentos em uma cole\u00e7\u00e3o espec\u00edfica. O m\u00e9todo find aceita dois par\u00e2metros principais:</p> <p>collection (str): O nome da cole\u00e7\u00e3o a ser consultada. query (dict, opcional): Um dicion\u00e1rio que define crit\u00e9rios de consulta. Se voc\u00ea n\u00e3o fornecer um query, todos os documentos da cole\u00e7\u00e3o ser\u00e3o retornados. Vamos ver um exemplo de consulta de documentos em uma cole\u00e7\u00e3o chamada 'users' onde o nome \u00e9 'Alice':</p>"},{"location":"consulta/#consulta-documentos-em-uma-colecao","title":"Consulta documentos em uma cole\u00e7\u00e3o","text":"<p><pre><code>results = db.find('users', {'name': 'Alice'})\nprint(results)  # [{'name': 'Alice', 'age': 30}]\n</code></pre> No exemplo acima, estamos usando o m\u00e9todo find para consultar documentos na cole\u00e7\u00e3o 'users' onde o campo 'name' \u00e9 igual a 'Alice'. O resultado da consulta \u00e9 uma lista de documentos que correspondem aos crit\u00e9rios especificados.</p> <p>Passo 3: Analisar os Resultados Os resultados da consulta s\u00e3o armazenados em uma lista. Voc\u00ea pode percorrer essa lista para acessar os documentos encontrados. No exemplo acima, o resultado foi um documento que correspondeu ao crit\u00e9rio 'name': 'Alice'.</p> <p>Conclus\u00e3o Consultar documentos em uma cole\u00e7\u00e3o \u00e9 uma parte fundamental do uso do LebryDB para armazenar e recuperar informa\u00e7\u00f5es. Ao seguir estes passos, voc\u00ea pode realizar consultas de maneira eficaz e acessar os dados que precisa em seu aplicativo Python.</p> <p>Lembre-se de que o LebryDB oferece flexibilidade ao permitir consultas com base em crit\u00e9rios espec\u00edficos, tornando-o uma ferramenta poderosa para gerenciar seus dados.</p> <p>Este guia em formato Markdown fornece instru\u00e7\u00f5es detalhadas sobre como consultar documentos em uma cole\u00e7\u00e3o usando o LebryDB. Voc\u00ea pode usar este guia em sua documenta\u00e7\u00e3o para ajudar os usu\u00e1rios a entenderem como realizar consultas eficazes em seu banco de dados.</p>"},{"location":"insert/","title":"LebryDB","text":""},{"location":"insert/#metodo-insert-inserindo-documentos","title":"M\u00e9todo <code>insert</code> - Inserindo Documentos","text":"<p>O m\u00e9todo <code>insert</code> da classe LebryDB \u00e9 usado para inserir um documento em uma cole\u00e7\u00e3o. Vamos entender detalhadamente os par\u00e2metros que voc\u00ea precisa fornecer ao usar este m\u00e9todo.</p>"},{"location":"insert/#parametro-collection-str","title":"Par\u00e2metro <code>collection</code> (str)","text":"<p>O par\u00e2metro <code>collection</code> representa o nome da cole\u00e7\u00e3o em que o documento ser\u00e1 inserido. Em termos simples, voc\u00ea pode pensar em uma cole\u00e7\u00e3o como sendo semelhante a uma tabela em um banco de dados relacional. </p> <p>Por exemplo, se voc\u00ea estiver criando um sistema para armazenar informa\u00e7\u00f5es de usu\u00e1rios, voc\u00ea pode ter uma cole\u00e7\u00e3o chamada 'users' para armazenar todos os documentos relacionados aos usu\u00e1rios do sistema.</p>"},{"location":"insert/#exemplo-de-uso-do-parametro-collection","title":"Exemplo de Uso do Par\u00e2metro <code>collection</code>","text":"<p><pre><code># Exemplo de uso do par\u00e2metro 'collection'\ndb.insert('users', user_document)\n</code></pre> No exemplo acima, estamos inserindo o documento user_document na cole\u00e7\u00e3o 'users'.</p> <p>Par\u00e2metro document (dict) O par\u00e2metro document \u00e9 um dicion\u00e1rio que representa o documento JSON a ser inserido na cole\u00e7\u00e3o. Um documento \u00e9 uma estrutura de dados que cont\u00e9m informa\u00e7\u00f5es que voc\u00ea deseja armazenar no banco de dados. Em outras palavras, \u00e9 o conjunto de dados que voc\u00ea deseja gravar na cole\u00e7\u00e3o.</p> <p>Aqui est\u00e1 um exemplo de um documento que representa um usu\u00e1rio:</p>"},{"location":"insert/#exemplo-de-um-documento","title":"Exemplo de um documento","text":"<p><pre><code>user_document = {\n    'name': 'Alice',\n    'age': 30,\n    'email': 'alice@example.com'\n}\n</code></pre> Neste exemplo, user_document \u00e9 um documento que cont\u00e9m informa\u00e7\u00f5es como o nome, a idade e o endere\u00e7o de e-mail de um usu\u00e1rio.</p> <p>Exemplo de Uso do Par\u00e2metro document</p>"},{"location":"insert/#exemplo-de-uso-do-parametro-document","title":"Exemplo de uso do par\u00e2metro 'document'","text":"<p><pre><code>db.insert('users', user_document)\n</code></pre> No exemplo acima, estamos inserindo o user_document na cole\u00e7\u00e3o 'users'.</p> <p>Conclus\u00e3o O m\u00e9todo insert permite que voc\u00ea insira informa\u00e7\u00f5es organizadas (documentos) em uma cole\u00e7\u00e3o espec\u00edfica no LebryDB. Voc\u00ea precisa especificar o nome da cole\u00e7\u00e3o onde deseja inserir o documento e fornecer o documento em formato de dicion\u00e1rio.</p> <p>Esta abordagem simplifica o armazenamento e recupera\u00e7\u00e3o de dados em seu aplicativo Python, tornando-o mais organizado e f\u00e1cil de gerenciar.</p> <p>Espero que este guia passo a passo em formato Markdown explique detalhadamente os par\u00e2metros collection e document e como us\u00e1-los ao chamar o m\u00e9todo insert da classe LebryDB. Voc\u00ea pode incorporar este guia em sua documenta\u00e7\u00e3o para ajudar os usu\u00e1rios a entenderem como inserir documentos em cole\u00e7\u00f5es usando o LebryDB.</p>"},{"location":"installation/","title":"LebryDB","text":""},{"location":"installation/#guia-de-instalacao-do-lebrydb","title":"Guia de Instala\u00e7\u00e3o do LebryDB","text":"<p>O LebryDB \u00e9 uma biblioteca simples de banco de dados em Python que oferece funcionalidades b\u00e1sicas de armazenamento de dados. Siga as etapas abaixo para instalar e come\u00e7ar a usar o LebryDB em seu projeto.</p>"},{"location":"installation/#pre-requisitos","title":"Pr\u00e9-requisitos","text":"<p>Certifique-se de que voc\u00ea tenha Python 3.11 instalado em seu sistema. Voc\u00ea pode verificar a vers\u00e3o do Python executando o seguinte comando no terminal:</p> <pre><code>python --version\n</code></pre>"},{"location":"installation/#instalacao","title":"Instala\u00e7\u00e3o","text":"<p>Para instalar o LebryDB, voc\u00ea pode usar o gerenciador de pacotes Python pip. Abra um terminal e execute o seguinte comando:</p>"},{"location":"installation/#bash","title":"bash","text":"<pre><code>pip install lebrydb\n</code></pre>"},{"location":"installation/#uso-basico","title":"Uso B\u00e1sico","text":"<p>Aqui est\u00e1 um exemplo de uso b\u00e1sico do LebryDB:</p> <pre><code># Importe a classe LebryDB\nfrom lebrydb import LebryDB\n\n# Crie uma inst\u00e2ncia do LebryDB\ndb = LebryDB()\n\n# Insira um documento em uma cole\u00e7\u00e3o\ndb.insert('users', {'name': 'Alice', 'age': 30})\n\n# Consulte documentos em uma cole\u00e7\u00e3o\nresults = db.find('users', {'name': 'Alice'})\nprint(results)  # [{'name': 'Alice', 'age': 30}]\n</code></pre>"},{"location":"installation/#documentacao","title":"Documenta\u00e7\u00e3o","text":"<p>Para obter informa\u00e7\u00f5es detalhadas sobre como usar o LebryDB, consulte a documenta\u00e7\u00e3o oficial.</p> <p>Contribui\u00e7\u00e3o Se voc\u00ea quiser contribuir para o desenvolvimento do LebryDB, sinta-se \u00e0 vontade para verificar o reposit\u00f3rio no GitHub e enviar pull requests.</p> <p>Agora voc\u00ea est\u00e1 pronto para come\u00e7ar a usar o LebryDB em seu projeto! Se voc\u00ea tiver alguma d\u00favida ou encontrar problemas, n\u00e3o hesite em consultar a documenta\u00e7\u00e3o ou procurar suporte na comunidade.</p> <p>Lembre-se de substituir <code>link-para-documentacao</code> e <code>link-para-o-repositorio</code> pelos links reais da documenta\u00e7\u00e3o e do reposit\u00f3rio do LebryDB, respectivamente. Esse guia de instala\u00e7\u00e3o pode ser adicionado ao seu projeto MkDocs para fornecer instru\u00e7\u00f5es claras sobre como os usu\u00e1rios podem instalar e come\u00e7ar a usar o LebryDB.</p>"},{"location":"remove/","title":"LebryDB","text":""},{"location":"remove/#metodo-remove-removendo-documentos","title":"M\u00e9todo <code>remove</code> - Removendo Documentos","text":"<p>O m\u00e9todo <code>remove</code> da classe LebryDB \u00e9 usado para remover documentos de uma cole\u00e7\u00e3o que correspondem a uma consulta. Ele permite que voc\u00ea exclua documentos com base em crit\u00e9rios espec\u00edficos.</p>"},{"location":"remove/#sintaxe","title":"Sintaxe","text":"<p>Aqui est\u00e1 a sintaxe completa do m\u00e9todo <code>remove</code>:</p>"},{"location":"remove/#parametros","title":"Par\u00e2metros:","text":""},{"location":"remove/#collection","title":"collection","text":"<p>(str): O nome da cole\u00e7\u00e3o a ser atualizada.</p>"},{"location":"remove/#query","title":"query","text":"<p>(dict): Um dicion\u00e1rio que define os crit\u00e9rios para selecionar os documentos a serem removidos.</p>"},{"location":"remove/#exemplo-de-uso","title":"Exemplo de Uso","text":"<p>Aqui est\u00e1 um exemplo pr\u00e1tico de como usar o m\u00e9todo remove:</p> <pre><code>db.remove(collection, query)\n</code></pre> <p><pre><code>from lebrydb import LebryDB\n\n# Crie uma inst\u00e2ncia do LebryDB\ndb = LebryDB()\n\n# Vamos inserir alguns documentos na cole\u00e7\u00e3o 'users'\ndb.insert('users', {'name': 'Alice', 'age': 30})\ndb.insert('users', {'name': 'Bob', 'age': 25})\ndb.insert('users', {'name': 'Charlie', 'age': 35})\n\n# Vamos remover o documento com o nome 'Alice' da cole\u00e7\u00e3o 'users'\nquery = {'name': 'Alice'}\ndb.remove('users', query)\n\n# Verifique se a remo\u00e7\u00e3o foi bem-sucedida\nremoved_user = db.find('users', query)\nprint(removed_user)  \n</code></pre> Neste exemplo, estamos criando uma inst\u00e2ncia do LebryDB, inserindo alguns documentos na cole\u00e7\u00e3o 'users' e, em seguida, usando o m\u00e9todo remove para excluir um documento com base no crit\u00e9rio de que o nome deve ser 'Alice'.</p> <p>Ap\u00f3s a remo\u00e7\u00e3o, estamos verificando se o documento foi removido com sucesso consultando o documento removido, que agora deve estar vazio.</p>"},{"location":"remove/#parametro-query-dict","title":"Par\u00e2metro <code>query</code> (dict)","text":"<p>O par\u00e2metro <code>query</code> \u00e9 um dicion\u00e1rio que define os crit\u00e9rios para selecionar os documentos a serem removidos. Este dicion\u00e1rio permite que voc\u00ea especifique as condi\u00e7\u00f5es sob as quais um documento deve ser considerado para remo\u00e7\u00e3o.</p>"},{"location":"remove/#estrutura-do-dicionario-query","title":"Estrutura do Dicion\u00e1rio <code>query</code>","text":"<p>O dicion\u00e1rio <code>query</code> segue uma estrutura simples, onde as chaves representam os campos ou atributos do documento que voc\u00ea deseja verificar e os valores representam as condi\u00e7\u00f5es que os documentos devem atender para serem removidos. As condi\u00e7\u00f5es podem incluir correspond\u00eancia de valores espec\u00edficos, intervalos, operadores l\u00f3gicos, entre outros.</p> <p>Aqui est\u00e3o alguns exemplos de como voc\u00ea pode estruturar o dicion\u00e1rio <code>query</code>:</p> <ul> <li>Remover documentos com um campo igual a um valor espec\u00edfico:</li> </ul> <p><code>python   query = {'field_name': 'value'}</code></p> <p>Remover documentos com um campo que n\u00e3o seja igual a um valor espec\u00edfico:</p> <p><pre><code>query = {'field_name': {'$ne': 'value'}}\n</code></pre> Remover documentos com um campo que atenda a uma condi\u00e7\u00e3o de intervalo:</p> <p><pre><code>query = {'age': {'$gte': 18, '$lte': 65}}\nCombinar v\u00e1rias condi\u00e7\u00f5es com operadores l\u00f3gicos:\n</code></pre> <pre><code>query = {\n    '$and': [\n        {'field1': 'value1'},\n        {'field2': 'value2'}\n    ]\n}\n</code></pre> Exemplo de Uso do Par\u00e2metro query Aqui est\u00e1 um exemplo pr\u00e1tico de como usar o par\u00e2metro query ao remover documentos:</p> <p><pre><code>from lebrydb import LebryDB\n\n# Crie uma inst\u00e2ncia do LebryDB\ndb = LebryDB()\n\n# Vamos inserir alguns documentos na cole\u00e7\u00e3o 'users'\ndb.insert('users', {'name': 'Alice', 'age': 30})\ndb.insert('users', {'name': 'Bob', 'age': 25})\ndb.insert('users', {'name': 'Charlie', 'age': 35})\n\n# Vamos remover documentos com idade igual ou superior a 30 anos da cole\u00e7\u00e3o 'users'\nquery = {'age': {'$gte': 30}}\ndb.remove('users', query)\n</code></pre> Neste exemplo, estamos usando o par\u00e2metro query para selecionar e remover documentos da cole\u00e7\u00e3o 'users' com base no crit\u00e9rio de que a idade deve ser igual ou superior a 30 anos.</p>"},{"location":"update/","title":"M\u00e9todo <code>update</code> - Atualizando Documentos","text":"<p>O m\u00e9todo <code>update</code> da classe LebryDB \u00e9 usado para atualizar documentos em uma cole\u00e7\u00e3o que correspondem a uma consulta. Ele permite que voc\u00ea modifique documentos com base em crit\u00e9rios espec\u00edficos.</p>"},{"location":"update/#sintaxe","title":"Sintaxe","text":"<p>Aqui est\u00e1 a sintaxe completa do m\u00e9todo <code>update</code>:</p> <pre><code>db.update(collection, query, new_values)\n</code></pre>"},{"location":"update/#parametros","title":"Par\u00e2metros:","text":""},{"location":"update/#collection","title":"collection","text":"<p>(str): O nome da cole\u00e7\u00e3o a ser atualizada.</p>"},{"location":"update/#query","title":"query","text":"<p>(dict): Um dicion\u00e1rio que define os crit\u00e9rios para selecionar os documentos a serem atualizados. new_values (dict): Um dicion\u00e1rio contendo os novos valores para atualizar os documentos correspondentes.</p>"},{"location":"update/#exemplo-de-uso","title":"Exemplo de Uso","text":"<p>Aqui est\u00e1 um exemplo pr\u00e1tico de como usar o m\u00e9todo update: <pre><code>import LebryDB\n\n# Crie uma inst\u00e2ncia do LebryDB\ndb = LebryDB()\n\n# Vamos inserir alguns documentos na cole\u00e7\u00e3o 'users'\ndb.insert('users', {'name': 'Alice', 'age': 30})\ndb.insert('users', {'name': 'Bob', 'age': 25})\ndb.insert('users', {'name': 'Charlie', 'age': 35})\n\n# Vamos atualizar o documento com o nome 'Alice' para definir sua idade como 31 anos\nquery = {'name': 'Alice'}\nnew_values = {'age': 31}\ndb.update('users', query, new_values)\n\n# Verifique se a atualiza\u00e7\u00e3o foi bem-sucedida\nupdated_user = db.find('users', query)\nprint(updated_user)  \n</code></pre> Neste exemplo, estamos criando uma inst\u00e2ncia do LebryDB, inserindo alguns documentos na cole\u00e7\u00e3o 'users' e, em seguida, usando o m\u00e9todo update para atualizar um documento com base no crit\u00e9rio de que o nome deve ser 'Alice'. Estamos alterando a idade de 'Alice' para 31 anos.</p> <p>Ap\u00f3s a atualiza\u00e7\u00e3o, estamos verificando se a atualiza\u00e7\u00e3o foi bem-sucedida consultando o documento atualizado.</p> <p>Espero que este exemplo em formato Markdown explique claramente como usar o m\u00e9todo update para atualizar documentos em uma cole\u00e7\u00e3o usando o LebryDB. Voc\u00ea pode incorporar este exemplo em sua documenta\u00e7\u00e3o para ajudar os usu\u00e1rios a entenderem como realizar atualiza\u00e7\u00f5es eficazes em seus documentos.</p>"}]}